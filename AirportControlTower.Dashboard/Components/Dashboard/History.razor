@using AirportControlTower.Dashboard.Dtos
@using AirportControlTower.Dashboard.Services
@implements IDisposable

@if (Last10AirlineStateChangeHistory.Count() > 0)
{
    <div class="dashboard-card history-card">
        <div class="card-header">
            <h2>🔄 Recent State Changes</h2>
        </div>
        <div class="card-content list-table">
            <div class="state-changes-list">
                @foreach (var change in Last10AirlineStateChangeHistory)
                {
                    <div class="state-change-item @(change.Status == HistoryStatus.Rejected ? "rejected" : "accepted")">

                        <div class="change-info">
                            <div class="change-time">
                                @change.CreatedOn.ToString("HH:mm:ss")
                            </div>
                            <div class="aircraft-info">
                                <span class="aircraft-type">
                                    @(change.AirlineType == AirlineType.Airliner ? "✈️" : "🛩️")
                                </span>
                                <span class="aircraft-name">@change.AirlineName</span>
                                <span class="callsign">(@change.AirlineCallSign)</span>
                            </div>
                        </div>
                        <div class="change-info">
                            <div class="state-transition">
                                <span class="state @change.FromState.ToString().ToLower()">@change.FromState</span>
                                <span class="transition-arrow">➜</span>
                                <span class="trigger">@change.Trigger</span>
                            </div>
                            <div class="status">
                                @if (change.Status == HistoryStatus.Accepted)
                                {
                                    <span class="status-badge accepted">✅ Accepted</span>
                                }
                                else
                                {
                                    <span class="status-badge rejected">❌ Rejected</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="card-content">
            <p>Last update: @(string.IsNullOrEmpty(LastUpdate) ? "n/a" : LastUpdate)</p>
        </div>
    </div>
}
else
{
    <div class="dashboard-card history-unavailable">
        <div class="history-error">
            <div class="error-icon">
                <span class="large-icon">📊</span>
            </div>
            <div class="error-message">
                <h3>No State Changes Available</h3>
                <div class="retry-info">
                    <span>⏱️ Refresh in: <span class="retry-timer">10</span>s</span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<StateChangeHistoryDto> Last10AirlineStateChangeHistory { get; set; } = default!;

    [Inject]
    public DashboardService Service { get; set; } = default!;

    [Inject]
    public ILogger<History> Logger { get; set; } = default!;

    Timer timer = default!;
    bool isRefreshing = false;
    string LastUpdate = string.Empty;

    protected override void OnInitialized()
    {
        StartRefresh();
    }

    public void StartRefresh()
    {
        timer = new Timer(callback: async (_) => await RefreshAndUpdateUI(),
                           state: null,
                           dueTime: TimeSpan.FromSeconds(10),
                           period: TimeSpan.FromSeconds(10));
    }

    public async Task RefreshAndUpdateUI()
    {
        await GetMostRecentAirlineStateChangeHistory();
        await InvokeAsync(StateHasChanged);
    }

    public async Task GetMostRecentAirlineStateChangeHistory()
    {
        isRefreshing = true;
        Logger.LogInformation("refreshing history start");
        await InvokeAsync(StateHasChanged);

        Last10AirlineStateChangeHistory = await Service.MostRecentAirlineStateChangeHistory() ?? Array.Empty<StateChangeHistoryDto>();

        Logger.LogInformation("refreshing history end");

        LastUpdate = DateTime.UtcNow.ToString("HH:mm:ss");
        isRefreshing = false;
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}
